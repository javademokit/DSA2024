Class Level Lock is a mechanism where every class in java has a unique lock which is nothing but a class level lock. If a thread wants to execute a static synchronized method then the thread requires a class level lock once the thread gets a class level lock then it is allowed to execute any static synchronized method of that class. Once method execution completes automatically thread releases the lock. While a thread executing a static synchronized method the remaining thread is not allowed to execute any static synchronized method of that class simultaneously.


Object Level Lock is a mechanism where every object in java has a unique lock which is nothing but an object–level lock. If a thread wants to execute a synchronized method on the given object then the thread first required the object level lock once the thread gets object level lock then it is allowed to execute any synchronized method on the given object and once the method execution completed automatically thread releases the lock of that object.


Class Level Lock

Object Level Lock

This lock can be used when we want to prevent multiple threads to enter the synchronized block of available instances on runtime. 	This lock is used when we want a non-static method or non-static block of our code should be accessed by only one thread at a time.
This lock is used to make static data thread-safe.	This lock is used to make non-static data thread-safe.
Multiple objects of a particular class may exist but there is always one class’s class object lock available.	Every object the class have their own lock.
We can get a class level lock as follows:

public class GFG {

  public void m1( ) {

     synchronized (GFG.class) {

    // some line of code

  }

}

We can get object level lock as follows:

public class GFG {

  public void m1( ) {

     synchronized (this) {

        // some line of code

     }

  }

}


Difference Between Mono and Flux in Spring WebFlux


Spring WebFlux is a part of the Spring Framework that provides reactive programming support for web applications. It introduces reactive types like Mono and Flux publishers which are fundamental to Its programming model. Mono and Flux play a crucial role in reactive programming.

In this article, we will explore Mono vs Flux.

Mono
Creation: A Mono can be created by using static methods like Mono.just() or Mono.empty() or Mono.error()
Subscription: The subscriber subscribes to the Mono triggering the execution of the pipeline.
Emission: The Mono publisher emits zero or one item followed by an onComplete or onError signals
Operators: Various operators can transform the emitted item, handle errors, or perform side-effects
Advantages:
Simplicity: Ideal for operations that return a single result or none.
Performance: Efficient handling of single-value streams with minimal overhead.
Error Handling: Comprehensive error handling capabilities with operators like onErrorReturn and onErrorResume.
Flux
Creation: A Flux can be created by using static methods like Flux.just() or Flux.fromIterable() or Flux.range()
Subscription: The subscriber subscribes to the Flux triggering the execution of the pipeline.
Emission: The Mono publisher emits zero to N items followed by an onComplete or onError signals
Operators: Various operators can transform the emitted items, handle errors, buffer, window, or combine multiple Flux streams
Advantages:
Flexibility: Capable of handling multiple items, making it suitable for collections, streams, and real-time data.
Rich Operators: Extensive set of operators to manipulate and transform data streams, including buffer, window, merge, zip, etc.
Scalability: Efficiently manages large data streams with built-in Backpressure support.