3. What are functional interfaces? Provide examples.
Answer: Functional interfaces are interfaces with a single abstract method. They can have multiple default or static methods. They can be used as the target types for lambda expressions.

Examples:

Runnable: Runnable is a functional interface with a single run() method.
Callable: Callable is a functional interface with a single call() method that returns a result.
Predicate<T>: Represents a predicate (boolean-valued function) of one argument.
Function<T, R>: Represents a function that accepts one argument and produces a result.
4. Explain the Streams API and provide an example.
Answer: The Streams API provides a way to process sequences of elements (e.g., collections) in a functional manner. It supports operations such as filter, map, reduce, and collect.


Java 8 introduced many new features and improvements, and understanding them is crucial for both interviews and practical application. Here are ten common Java 8 interview questions, along with brief explanations:

1. What are the key features introduced in Java 8?
Answer: Java 8 introduced several significant features:

Lambda Expressions: Provide a clear and concise way to represent one method interface using an expression.
Functional Interfaces: Interfaces with a single abstract method, used with lambda expressions.
Streams API: Allows for functional-style operations on streams of elements, such as filter, map, and reduce.
Default Methods: Allows interfaces to have method implementations.
Optional: A container object which may or may not contain a value.
New Date and Time API: Provides a comprehensive and standardized way to handle dates and times.
Nashorn JavaScript Engine: Replaces the older Rhino JavaScript engine for better performance.
2. What is a lambda expression and how does it differ from an anonymous class?
Answer: A lambda expression is a concise way to represent an instance of a functional interface (an interface with a single abstract method) using an expression. For example:

java
Copy code
(button) -> System.out.println("Button clicked!");
Differences:

Syntax: Lambda expressions have a more concise syntax compared to anonymous classes.
Use: Lambda expressions can only be used with functional interfaces, whereas anonymous classes can implement any interface or extend any class.
Type Inference: Lambda expressions support type inference, whereas anonymous classes require explicit type declaration.
3. What are functional interfaces? Provide examples.
Answer: Functional interfaces are interfaces with a single abstract method. They can have multiple default or static methods. They can be used as the target types for lambda expressions.

Examples:

Runnable: Runnable is a functional interface with a single run() method.
Callable: Callable is a functional interface with a single call() method that returns a result.
Predicate<T>: Represents a predicate (boolean-valued function) of one argument.
Function<T, R>: Represents a function that accepts one argument and produces a result.
4. Explain the Streams API and provide an example.
Answer: The Streams API provides a way to process sequences of elements (e.g., collections) in a functional manner. It supports operations such as filter, map, reduce, and collect.

Example:

java
Copy code
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        List<String> filteredNames = names.stream()
            .filter(name -> name.startsWith("A"))
            .map(String::toUpperCase)
            .collect(Collectors.toList());

        System.out.println(filteredNames); // Output: [ALICE]
    }
}
5. What are default methods in interfaces?
Answer: Default methods are methods in interfaces that have a body. They allow interfaces to provide method implementations. This helps in extending interfaces with new methods without affecting existing implementations.

Example:

java
Copy code
public interface MyInterface {
    default void defaultMethod() {
        System.out.println("Default method");
    }
}
6. What is Optional and how is it used?
Answer: Optional is a container object which may or may not contain a value. It is used to avoid NullPointerException and to represent optional values more explicitly.


10. Explain the difference between findFirst() and findAny() in Streams.
Answer:

findFirst(): Returns the first element of the stream, if it exists. It is more suitable for ordered streams where the order matters.
findAny(): Returns any element from the stream, and is generally more efficient in parallel streams where the order does not matter.